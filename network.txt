OSI七层模型：应用层-表示层-会话层-传输层-网络层-数据链路层-物理层

TCP四层模型：应用层-传输层-网络层-数据链路层

应用层协议：http、https、dns、ftp。
表示层、会话层协议比较少，一般不问，我也不知道。
传输层-提供端对端的传输：TCP、UDP。
网络层-为数据包选择路由：IP、ICMP、OSPF。
数据链路层-传输有地址的帧，错误检测功能：ARP、RARP。



http与https：https是http+tsl/ssl，是在http基础上，使用了加密协议的产物。
一次https请求简单流程如下：
1.客户端请求服务端，获取证书和用于非对称加密的公钥，服务端保存私钥。
2.客户端向证书颁发机构验证证书合法性，验证通过则继续流程。
3.客户端生成一个对称加密用的密钥，并使用服务端公钥对密钥进行加密，然后发送给服务端。
4.服务端收到密钥。
5.客户端使用密钥对传输内容进行加密，服务端解密。

加密算法：
对称加密：DES、AES。
非对称加密：RSA。
摘要算法：MD5，SHA




TCP与UDP：
TCP是基于连接的传输，只有链接建立后才能传输内容，是可靠的协议，此外TCP还具有拥塞控制、超时重传等保证传输质量的能力。
UDP不需要建立连接即可传输，不保证传输的质量。

以Socket编程为例：
使用TCP传输内容，需要客户端先请求建立一个Socket连接，服务端确认之后，才能进行传输。而使用TCP传输内容时，客户端指定端口直接发送数据，服务端监听端口即可。

TCP连接的建立：三次握手。
1.客户端发起syn连接请求，syn.seq = n，客户端进入等待状态；
2.服务端响应请求，回复一个ack+syn的包，这个包的作用是告诉客户端，自己收到了请求包，所以ack.seq = n+1，同时为了标识自己的包，syn.seq = m；
3.客户端收到回复后，回复一个ack包，ack.seq = m + 1，至此连接建立。

观察上述流程，可以发现握手的三次请求中，1、2和2、3分别可以看作客户端和服务端的身份做了互换，各经历了一次发起请求与等待回应的过程。

异常分析：
1.服务端没收到请求，客户端会重试一定次数后停止。
2.客户端没收到回复，对客户端来说是和1中情况一致；对服务端来说，服务端充当了1中的请求发送者的角色，所以服务端也会重试一定次数后停止。
3.如果服务端没收到回复，服务端会进入等待的状态并持续一段时间。对客户端来说，已经进入了连接建立的状态，客户端会开始发送消息。在一些严格的系统中，服务端会抛弃客户端发送的消息；在一些比较宽松的系统中，因为客户端发送的消息中会带seq，可以根据这个确认连接已经建立。


TCP连接的断开：四次挥手。
1.客户端主动发起关闭连接，发送一个fin.seq = n，客户端进入等待状态。
2.服务端回复ack，ack.ack = n + 1，客户端进入关闭状态。
3.服务端发送一个ack + fin，fin.ack = n + 1，ack.seq = q。
4.客户端回复一个ack，ack.seq = q + 1。

异常分析：同建立连接的异常分析，当没收到时会超时重传。




IP协议：为主机提供一种无连接、不可靠的、尽力而为的数据报传输服务。

主要内容：
1.分组转发。当数据包到达某个路由器时，将其交付到该路由器所在的局域网的主机或者路由表中的下一跳路由器。
2.分片。数据包超过以太网MTU时，需要将包进行分割，到达主机后再重新组装。



ARP协议：在发送数据包时，需要将IP地址转化为物理地址，ARP协议通过发送广播，向同一局域网内的主机查询IP与Mac的对应关系。




浏览器输入一个网址，按下回车键后发生了什么？

1.DNS解析：先查缓存，然后查host，再查运营商DNS服务器，最后查全球的DNS。
2.ARP解析：如果ARP表中有IP的记录，则不查了；否则进行ARP解析。
3.TCP连接建立：TCP三次握手。
4.如果是https：会进行证书验证。
5.开始传输。
